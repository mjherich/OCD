<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">

    <title>OCD - Open Chffr Dashboard</title>

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.0/css/font-awesome.min.css">

    <!-- Bootstrap core CSS -->
    <link href="/Assets/MDB/css/bootstrap.min.css" rel="stylesheet">

    <!-- Material Design Bootstrap -->
    <link href="/Assets/MDB/css/mdb.min.css" rel="stylesheet">

    <!-- JQuery -->
    <script type="text/javascript" src="/Assets/MDB/js/jquery-2.2.3.min.js"></script>

    <!-- Bootstrap tooltips -->
    <script type="text/javascript" src="/Assets/MDB/js/tether.min.js"></script>

    <!-- Bootstrap core JavaScript -->
    <script type="text/javascript" src="/Assets/MDB/js/bootstrap.min.js"></script>



    <script type="text/javascript" src="/Assets/Moment/js/moment.js"></script>

    <script type="text/javascript" src="/Assets/Custom/js/unitConverter.js"></script>

    <link rel="stylesheet" href="/Assets/Ion.RangeSlider/css/ion.rangeSlider.css" />

    <link rel="stylesheet" href="/Assets/Ion.RangeSlider/css/ion.rangeSlider.skinNice.css" />

    <script type="text/javascript" src="/Assets/Ion.RangeSlider/js/ion.rangeSlider.min.js"></script>

    <script type="text/javascript" src="/Assets/ClipboardJs/js/clipboard.min.js"></script>

    <script type="text/javascript" src="/Assets/GifJs/js/gif.js"></script>

    <script type="text/javascript" src="~/Assets/FileSaver/js/FileSaver.js"></script>

    <style>
        main {
            padding-top: 3rem;
            padding-bottom: 2rem;
        }

        .widget-wrapper {
            padding-bottom: 2rem;
            border-bottom: 1px solid #e0e0e0;
            margin-bottom: 2rem;
        }

        .extra-margins {
            margin-top: 1rem;
            margin-bottom: 2.5rem;
        }

        .divider-new {
            margin-top: 0;
        }

        .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {
            margin-bottom: 10px;
        }



        /* Table scroll from http://fiddle.jshell.net/sschauhan/7h5eaeb6/ */

        table.table-fixedheader {
            width: 100%;
        }

            table.table-fixedheader, table.table-fixedheader > thead, table.table-fixedheader > tbody, table.table-fixedheader > thead > tr, table.table-fixedheader > tbody > tr, table.table-fixedheader > thead > tr > th, table.table-fixedheader > tbody > td {
                display: block;
            }

                table.table-fixedheader > thead > tr:after, table.table-fixedheader > tbody > tr:after {
                    content: ' ';
                    display: block;
                    visibility: hidden;
                    clear: both;
                }

                table.table-fixedheader > tbody {
                    overflow-y: scroll;
                    height: 300px;
                }

                table.table-fixedheader > thead {
                    overflow-y: scroll;
                }
                
                    table.table-fixedheader > thead::-webkit-scrollbar {
                        background-color: inherit;
                    }
                    

                    table.table-fixedheader > thead > tr > th:after, table.table-fixedheader > tbody > tr > td:after {
                        content: ' ';
                        display: table-cell;
                        visibility: hidden;
                        clear: both;
                    }



                    table.table-fixedheader > thead tr th, table.table-fixedheader > tbody tr td {
                        float: left;
                        word-wrap: break-word;
                    }

        .text-muted {
            color: #cecece !important;
        }

        /* ==== Col Width ====*/

        /* Col : # */
        #tblDrives th:nth-child(1), #tblDrives td:nth-child(1) {
            width: 5%;
        }

        /* Col : Date */
        #tblDrives th:nth-child(2), #tblDrives td:nth-child(2) {
            width: 20%;
        }

        /* Col : Distance */
        #tblDrives th:nth-child(3), #tblDrives td:nth-child(3) {
            width: 11%;
        }

        /* Col : Time */
        #tblDrives th:nth-child(4), #tblDrives td:nth-child(4) {
            width: 10%;
        }

        /* Col : Max Speed */
        #tblDrives th:nth-child(5), #tblDrives td:nth-child(5) {
            width: 14%;
        }

        /* Col : Avg Speed */
        #tblDrives th:nth-child(6), #tblDrives td:nth-child(6) {
            width: 14%;
        }

        /* Col : Min Speed */
        #tblDrives th:nth-child(7), #tblDrives td:nth-child(7) {
            width: 14%;
        }

        /* Col : Status */
        #tblDrives th:nth-child(8), #tblDrives td:nth-child(8) {
            width: 12%;
        }







        #playerImg {
            width: 75%;
            margin-bottom: 30px;
        }

        .unit-btn {
            width: 100%;
            margin-left: 0px;
        }

        .irs-line, .irs-bar {
            cursor: pointer;
        }

        #tblDrives tbody tr:not(.text-muted) {
            cursor: pointer;
        }

        .clickable {
            cursor: pointer;
        }

        .sort-btn {
            margin-top: 5px;
        }

        #tblDrives thead th {
            cursor: pointer;
        }

        .selected-sort {
            color: rgb(110, 201, 230)
        }
    </style>
</head>

<body>

    <header>

        <!--Navbar-->
        <nav class="navbar navbar-dark primary-color-dark">

            <!-- Collapse button-->
            <button class="navbar-toggler hidden-sm-up" type="button" data-toggle="collapse" data-target="#collapseEx">
                <i class="fa fa-bars"></i>
            </button>

            <div class="container-fluid">

                <!--Collapse content-->
                <div class="collapse navbar-toggleable-xs" id="collapseEx">
                    <!--Navbar Brand-->
                    <a class="navbar-brand" href="/">OCD</a>
                    <!--Links-->
                    <ul class="nav navbar-nav"></ul>

                </div>
                <!--/.Collapse content-->

            </div>

        </nav>
        <!--/.Navbar-->

    </header>

    <main>

        <!--Main layout-->
        <div class="container-fluid">
            <div class="row">

                <!--Sidebar-->
                <div class="col-md-3">

                    <div class="widget-wrapper">
                        <div class="card z-depth-2">
                            <div class="card-header danger-color-dark white-text">
                                User
                                <button class="btn btn-info btn-sm pull-right" style="margin-top: -2px;" id="btnDisconnect"><span class="fa fa-sign-out"></span> Disconnect</button>
                                <button class="btn btn-info btn-sm pull-right" style="margin-top: -2px;" id="btnShareLnk"><span class="fa fa-link"></span> Share Link</button>
                            </div>
                            <div class="card-block">
                                Username : <span class="lead" id="txtUserName"></span><br />
                                <span id="txtCommaPoints">-</span> <span style="color: goldenrod;">Comma Points</span>
                                <hr />
                                <span id="txtDistanceDriven">-</span> Driven<br />
                                <span id="txtAvgDistanceDriven">-</span> Average per day<br />
                                <hr />
                                <span id="txtTimeDriven">-</span> Uploaded<br />
                                <span id="txtAvgTimeDriven">-</span> Average per day<br />
                                <hr />
                                <span id="txtMaxSpeed">-</span> Max speed<br />
                                <span id="txtAvgSpeed">-</span> Average speed<br />
                            </div>
                        </div>
                    </div>

                    <div class="widget-wrapper" style="display: none;">
                        <div class="card z-depth-2">
                            <div class="card-header warning-color-dark white-text">
                                Fun Facts
                            </div>
                            <div class="card-block">
                                <h3>Did you know ?</h3>
                                <h2>WIP</h2>
                            </div>
                        </div>
                    </div>

                    <div class="widget-wrapper">
                        <div class="card z-depth-2">
                            <div class="card-header warning-color-dark white-text">
                                Units
                            </div>
                            <div class="card-block">
                                <div class="card z-depth-2">
                                    <div class="card-header yellow darken-4 white-text">
                                        Presets
                                    </div>
                                    <div class="card-block">
                                        <button class="btn btn-success unit-btn" id="btnUnitPresetSI">SI</button>
                                        <button class="btn btn-danger unit-btn" id="btnUnitPresetImperial">Imperial</button>
                                    </div>

                                </div>
                                <hr />
                                <div class="card z-depth-2">
                                    <div class="card-header red darken-4 white-text">
                                        Distance
                                    </div>
                                    <div class="card-block">
                                        <input type="text" id="inpUnitDist">
                                    </div>

                                </div>

                                <div class="card z-depth-2">
                                    <div class="card-header pink darken-4 white-text">
                                        Speed
                                    </div>
                                    <div class="card-block">
                                        <input type="text" id="inpUnitSpeed">
                                    </div>

                                </div>

                                <div class="card z-depth-2">
                                    <div class="card-header purple darken-4 white-text">
                                        Duration
                                    </div>
                                    <div class="card-block">
                                        <input type="text" id="inpUnitTime">
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="widget-wrapper">
                        <div class="card z-depth-2">
                            <div class="card-header info-color white-text">
                                Parameters
                            </div>
                            <div class="card-block">
                                <div class="md-form">
                                    <input type="number" id="inpParseWorker" step="1" class="form-control">
                                    <label for="inpParseWorker"># of Parsing Workers</label>
                                </div>
                                <button class="btn btn-info" id="btnCommaTokenModal">Comma Token</button>
                                <button class="btn btn-info" id="btnDeleteIDB">DeleteIDB</button>
                            </div>
                        </div>
                    </div>
                </div>
                <!--/.Sidebar-->
                <!--Main column-->
                <div class="col-md-9">
                    <div class="row">
                        <div class="col-md-12" style="display: none;" id="alrtNoIndexedDB">
                            <div class="alert alert-warning" role="alert">
                                Your browser don't support IndexedDB. No route data will be able to be cached.
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="divider-new">
                                <h2 class="h2-responsive">Welcome to the Open Comma Dashboard</h2>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="card z-depth-2">
                                <div class="card-header success-color white-text">
                                    Filters
                                </div>
                                <div class="card-block">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="row">
                                                <div class="col-md-2">
                                                    <strong>Distance</strong>
                                                </div>
                                                <div class="col-md-10">
                                                    <input type="text" id="posFilterDistance" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="row">
                                                <div class="col-md-2">
                                                    <strong>Duration</strong>
                                                </div>
                                                <div class="col-md-10">
                                                    <input type="text" id="posFilterDuration" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-12">
                                            <div class="row">
                                                <div class="col-md-1">
                                                    <strong>Date</strong>
                                                </div>
                                                <div class="col-md-11">
                                                    <input type="text" id="posFilterDate" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="card z-depth-2">
                                <div class="card-header info-color-dark white-text">
                                    Drives
                                    <span class="pull-right"><span id="txtDriveLoadStatus">Initializing</span> - <span id="txtDriveLoadCurrent">-</span>/<span id="txtDriveLoadTot">-</span></span>
                                </div>
                                <div class="card-block">
                                    <div class="table-responsive">
                                        <table class="table table-sm table-striped table-hover table-fixedheader" id="tblDrives">
                                            <thead class="thead-default">
                                                <tr>
                                                    <th>#</th>
                                                    <th>Date</th>
                                                    <th>Distance</th>
                                                    <th>Time</th>
                                                    <th>Max Speed</th>
                                                    <th>Avg Speed</th>
                                                    <th>Min Speed</th>
                                                    <th>Status</th>
                                                </tr>
                                            </thead>
                                            <tbody></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="card z-depth-2">
                                <div class="card-header default-color white-text">
                                    Drives Graphs
                                </div>
                                <div class="card-block">
                                    <canvas id="chrtGlobalSpeed" height="450" class="img-thumbnail"></canvas>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="card-deck-wrapper">
                                <div class="card-deck">
                                    <div class="card z-depth-2">
                                        <div class="card-header success-color-dark white-text">
                                            Drive Player
                                        </div>
                                        <div class="card-block">
                                            <div class="view hm-black-strong text-md-center">
                                                <img id="playerImg" class="z-depth-2 figure-img img-thumbnail" src="/Assets/Custom/img/empty.png" alt="" style="display: inline-block;" />
                                                <div class="mask flex-center" id="playerImgOverlay" style="display: none;">
                                                    <p class="white-text">Loading ...</p>
                                                </div>
                                            </div>
                                            <p class="text-md-center">
                                                <span class="fa fa-lg fa-flag-checkered clickable" title="Set as gif start" id="btnSetGifStart"></span>
                                                <span class="fa fa-2x fa-fw"></span>
                                                <span class="fa fa-3x fa-step-backward clickable" title="Step backward" id="btnPrevImg"></span>
                                                <span class="fa fa-3x fa-fw"></span>
                                                <span class="fa fa-3x fa-play clickable" title="Play" id="btnPlay"></span>
                                                <span class="fa fa-3x fa-pause clickable" hidden title="Pause" id="btnPause"></span>
                                                <span class="fa fa-3x fa-fw"></span>
                                                <span class="fa fa-3x fa-step-forward clickable" title="Step forward" id="btnNextImg"></span>
                                                <span class="fa fa-2x fa-fw"></span>
                                                <span class="fa fa-lg fa-flag-checkered clickable" title="Set as gif end" id="btnSetGifEnd"></span>
                                            </p>
                                            <div class="text-md-center">
                                                <span class="fa fa-fw fa-minus clickable" id="btnSpeedMinus"></span>
                                                <select id="inpSpeed">
                                                    <option value="1" selected>1x</option>
                                                    <option value="1.5">1.5x</option>
                                                    <option value="2">2x</option>
                                                    <option value="3">3x</option>
                                                    <option value="5">5x</option>
                                                    <option value="8">8x</option>
                                                    <option value="10">10x</option>
                                                </select>
                                                <span class="fa fa-fw fa-plus clickable" id="btnSpeedPlus"></span>
                                            </div>
                                            <br />
                                            <input type="text" id="posPlayer" />
                                            <hr />
                                            <h5>Gif export :</h5>
                                            <input type="text" id="posGif" />
                                            <br />
                                            <button class="btn btn-success" type="button" id="btnGifExportShow">Export</button>
                                        </div>
                                    </div>

                                    <div class="card z-depth-2">
                                        <div class="card-header danger-color-dark white-text">
                                            Drive Stats
                                        </div>
                                        <div class="card-block">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <canvas id="chrtDriveSpeed" height="400" class="img-thumbnail"></canvas>
                                                </div>
                                                <div class="col-md-6">Started At :</div>
                                                <div class="col-md-6"><span id="txtDriveInfoStartDate">&nbsp;</span></div>
                                                <div class="col-md-6">Ended At :</div>
                                                <div class="col-md-6"><span id="txtDriveInfoEndDate">&nbsp;</span></div>
                                                <div class="col-md-6">Min Speed :</div>
                                                <div class="col-md-6"><span id="txtDriveInfoMinSpeed">&nbsp;</span></div>
                                                <div class="col-md-6">Max Speed :</div>
                                                <div class="col-md-6"><span id="txtDriveInfoMaxSpeed">&nbsp;</span></div>
                                                <div class="col-md-6">Avg Speed :</div>
                                                <div class="col-md-6"><span id="txtDriveInfoAvgSpeed">&nbsp;</span></div>
                                                <div class="col-md-6">GPS Points :</div>
                                                <div class="col-md-6"><span id="txtDriveInfoGPSPoint">&nbsp;</span></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <!--/.Main layout-->

    </main>

    <!--Footer-->
    <footer class="page-footer center-on-small-only primary-color-dark">

        <!--Call to action-->
        <div class="call-to-action">
            <h4>OCD - Open Comma Dashboard</h4>
            <ul>
                <li>
                    <h5><small class="text-muted">This website don't store or send any of your informations. Full source code available at <a href="https://github.com/remygrandin/OCD">https://github.com/remygrandin/OCD</a></small></h5>
                </li>
            </ul>
        </div>
        <!--/.Call to action-->
        <!--Copyright-->
        <div class="footer-copyright">
            <div class="container-fluid">
                MIT Licence - Rémy GRANDIN (aka scipio)
            </div>
        </div>
        <!--/.Copyright-->

    </footer>
    <!--/.Footer-->


    <div class="modal fade" id="connectModal" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Welcome To OCD</h4>
                </div>
                <div class="modal-body">
                    Please connect with the same google account as you connect on comma.
                    <hr />
                    <div class="text-xs-center">
                        <a class="btn btn-success" id="lnkGoogle">Connect</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="commaTokenModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Comma Token</h4>
                </div>
                <div class="modal-body">
                    Here is your comma API token. Be carefull, this token is personal. Anyone who has it can access all your drives, past, present and futur (until you revoke/regenerate the token).
                    <hr />
                    <p id="txtCommaToken" style="word-wrap: break-word;"></p>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="shareLnkModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Share Link</h4>
                </div>
                <div class="modal-body">
                    Here is your OCD share link. Be carefull, anyone who has it can access all your drives, past, present and futur (until you revoke/regenerate the comma token).
                    <hr />
                    <div class="input-group">
                        <input type="text" class="form-control" id="inpLnkShare">
                        <span class="input-group-btn">
                            <button class="btn btn-secondary" type="button" data-clipboard-target="#inpLnkShare" id="btnCopyLnkShare" title="Copy to clipboard">
                                <span class="fa fa-clipboard"></span>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="gifModal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Gif Export</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="btn-group" data-toggle="buttons" id="rdiGifSizePreset" style="margin-bottom: 39px;margin-left: 46px;">
                                <label class="btn btn-primary" gifSize="960x720" id="rdiGifSizePresetFull">
                                    <input type="radio" name="options" autocomplete="off"> Full Size
                                </label>
                                <label class="btn btn-primary" gifSize="480x360" id="rdiGifSizePresetHalf">
                                    <input type="radio" name="options" autocomplete="off"> 1/2
                                </label>
                                <label class="btn btn-primary active" gifSize="240x180" id="rdiGifSizePresetQuarter">
                                    <input type="radio" name="options" autocomplete="off" checked> 1/4
                                </label>
                                <label class="btn btn-primary" gifSize="#" id="rdiGifSizePresetCustom">
                                    <input type="radio" name="options" autocomplete="off"> Custom
                                </label>
                            </div>

                            <div class="md-form">
                                <i class="fa fa-arrows-h prefix"></i>
                                <input type="number" id="inpGifWidth" class="form-control" step="1" value="240">
                                <label for="inpGifWidth">Width</label>
                            </div>
                            <div class="md-form">
                                <i class="fa fa-arrows-v prefix"></i>
                                <input type="number" id="inpGifHeight" class="form-control" step="1" value="180">
                                <label for="inpGifHeight">Heigth</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="md-form">
                                <i class="fa fa-car prefix"></i>
                                <input type="number" id="inpGifInterval" class="form-control" step="1" value="200">
                                <label for="inpGifInterval">Frame Interval (in ms)</label>
                            </div>
                            <div class="md-form">
                                <i class="fa fa-search prefix"></i>
                                <input type="number" id="inpGifQuality" class="form-control" step="1" value="10">
                                <label for="inpGifQuality">Quality (lower is better)</label>
                            </div>
                            <div class="md-form">
                                <i class="fa fa-repeat prefix"></i>
                                <input type="number" id="inpGifRepeat" class="form-control" step="1" value="0">
                                <label for="inpGifQuality">Repeat Count (-1 = no repeat; 0 = forever)</label>
                            </div>
                        </div>

                        <div class="col-md-12 text-md-center">
                            <button type="button" class="btn btn-info" id="btnGifStartExport">Start Export</button>
                        </div>
                    </div>
                    <hr />
                    <div class="text-md-center">
                        Export Status :
                    </div>
                    <div class="text-md-center" id="txtGifStatus">

                    </div>
                    <progress class="progress progress-striped" value="0" max="100" id="prbGifExportStatus"></progress>
                    <div class="text-md-center" id="txtGifExportStatus">
                        Ready
                    </div>
                    <div id="gifResultZone" style="display: none;">
                        <hr />
                        <div class="text-md-center">
                            Result :
                        </div>
                        <div class="text-md-center">
                            <img id="imgGifExportResult" style="max-width: 100%" />
                        </div>
                        <div class="text-md-center">
                            <button type="button" class="btn btn-success" id="btnGifDownload">Download Gif (<span id="txtGifExportSize"></span> KiB)</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- MDB core JavaScript -->
    <script type="text/javascript" src="/Assets/MDB/js/mdb.js"></script>

    <script type="text/javascript" src="/Assets/ChartJs/js/Chart.min.js"></script>

    <script type="text/javascript">
        var user;
        window.routes = "";

        function htmlEncode(value) {
            return $('<div/>').text(value).html();
        }

        function getURLParam() {
            var urlParams = {};
            var queryString = location.hash.substring(1);
            var regex = /([^&=]+)=([^&]*)/g;
            var m;
            while (m = regex.exec(queryString)) {
                urlParams[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
            }
            return urlParams;
        }

        function loadEndPointJSON(service, callback) {
            callback = callback || $.noop;

            return $.ajax("https://api.comma.ai/v1/" + service, {
                headers: { 'Authorization': "JWT " + localStorage.getItem("COD.CommaToken") },
                success: function (data, textStatus, jqXHR) {
                    callback(data, textStatus, jqXHR);
                }
            });

        }

        function commaAuth(callback) {
            callback = callback || $.noop;

            loadEndPointJSON("auth/?access_token=" + localStorage.getItem("COD.GoogleToken"),
                function (data, textStatus, jqXHR) {
                    localStorage.setItem("COD.CommaToken", data.access_token);

                }).always(function (data_jqXHR, textStatus, jqXHR_errorThrown) {
                    if (textStatus == "error")
                        callback(false);
                    else {
                        if (data_jqXHR.success === false)
                            callback(false);
                        else
                            callback(true);
                    }
                });
        }

        function testCommaToken(callback) {
            callback = callback || $.noop;

            loadEndPointJSON("me/", function (data, textStatus, jqXHR) {


            }).always(function (data_jqXHR, textStatus, jqXHR_errorThrown) {
                if (textStatus == "error") {
                    localStorage.setItem("COD.CommaToken", "invalid");
                    callback(false);
                }
                else
                    callback(true);
            });
        }

        function showAuthModal() {
            // From : https://developers.google.com/identity/protocols/OAuth2UserAgent
            var params = [
                "response_type=token",
                "client_id=" + htmlEncode("606481730191-itkmnv1f1l9arkr1upoj5irkffheevs8.apps.googleusercontent.com"),
                "scope=" + htmlEncode("https://www.googleapis.com/auth/userinfo.email"),
                "redirect_uri=" + htmlEncode(window.location.href)
            ];

            $("#lnkGoogle").attr("href", "https://accounts.google.com/o/oauth2/v2/auth?" + params.join("&"));

            $("#connectModal").modal("show");
            return;

        }

        function lpad(str, width, padder) {
            padder = padder || '0';
            str = str + '';
            return str.length >= width ? str : new Array(width - str.length + 1).join(padder) + str;
        }

        function rpad(str, width, padder) {
            padder = padder || '0';
            str = str + '';
            return str.length >= width ? str : str + new Array(width - str.length + 1).join(padder);
        }

        function roundStr(nb, precision) {
            precision = precision || 0;

            var mult = Math.pow(10, precision);
            var res = Math.round(nb * mult) / mult;

            res = res.toFixed(precision);

            return res;
        }

        function getPictureUrl(route, dataPoint) {
            return route.url + "/sec" + (dataPoint.secPos + 1) + ".jpg";
        }

        // ==== Formating fct ====

        function formatDistance(value, sourceUnit) {
            value = Converters.convert(value, sourceUnit, units.distance);

            return roundStr(value, 2) + " " + units.distance;
        };
        function formatDistanceNoUnit(value, sourceUnit) {
            value = Converters.convert(value, sourceUnit, units.distance);

            return parseFloat(roundStr(value, 2));
        };

        function formatSpeed(value, sourceUnit) {
            value = Converters.convert(value, sourceUnit, units.speed);

            return roundStr(value, 2) + " " + units.speed;
        };

        function formatSpeedNoUnit(value, sourceUnit) {
            value = Converters.convert(value, sourceUnit, units.speed);

            return parseFloat(roundStr(value, 2));
        };

        function formatTime(value, sourceUnit) {
            value = Converters.convert(value, sourceUnit, units.time);

            if (units.time == "s") {
                var duration = moment.duration(value, "seconds");

                var durationStr = "";

                if (duration.asDays() > 1)
                    durationStr += lpad(duration.days(), 2) + "d ";

                if (duration.asHours() > 1)
                    durationStr += lpad(duration.hours(), 2) + ":";

                durationStr += lpad(duration.minutes(), 2) + ":" + lpad(duration.seconds(), 2);

                return durationStr;
            } else {
                return roundStr(value, 2) + " " + units.time;
            }
        };

        function formatTimeNoUnit(value, sourceUnit) {
            value = Converters.convert(value, sourceUnit, units.time);

            return parseFloat(roundStr(value, 2));

        };

        var units = {
            distance: "km",
            speed: "km/h",
            time: "s"
        }

        //  ==== Route Status ====

        const ROUTE_STATE_WORKER_STARTED = 0;
        const ROUTE_STATE_DOWNLOAD_STARTED = 1;
        const ROUTE_STATE_DOWNLOAD_DONE = 2;
        const ROUTE_STATE_PARSING_STARTED = 3;
        const ROUTE_STATE_PARSING_DONE = 4;
        const ROUTE_STATE_GETTING_MAX_IMAGE = 5;
        const ROUTE_STATE_MAX_IMAGE_FOUND = 6;
        const ROUTE_STATE_DONE = 7;

        $(function () {
            // Init

            // Player

            $("#posPlayer").ionRangeSlider({
                grid: true,
                prettify: function (num) {
                    return moment(num, "X").format("HH:mm:ss");
                },
                from_shadow: true
            });

            $("#posGif").ionRangeSlider({
                type: "double",
                grid: true,
                prettify: function (num) {
                    return moment(num, "X").format("HH:mm:ss");
                },
                from_shadow: true
            });

            // Filters
            $("#posFilterDate").ionRangeSlider({
                grid: true,
                type: "double",
                prettify: function (num) {
                    return moment(num, "X").format("YYYY/MM/DD");
                },
                onFinish: function (data) {
                    filterAndOrderTable();
                }
            });

            $("#posFilterDistance").ionRangeSlider({
                grid: true,
                type: "double",
                prettify: function (num) {
                    return formatDistance(num, "m");
                },
                onFinish: function (data) {
                    filterAndOrderTable();
                }
            });

            $("#posFilterDuration").ionRangeSlider({
                grid: true,
                type: "double",
                prettify: function (num) {
                    return formatTime(num, "s");
                },
                onFinish: function (data) {
                    filterAndOrderTable();
                }
            });

            // unit

            if (localStorage.getItem("units-distance") !== null) {
                units.distance = localStorage.getItem("units-distance");
            } else {
                localStorage.setItem("units-distance", units.distance);
            }

            if (localStorage.getItem("units-speed") !== null) {
                units.speed = localStorage.getItem("units-speed");
            } else {
                localStorage.setItem("units-speed", units.speed);
            }

            if (localStorage.getItem("units-time") !== null) {
                units.time = localStorage.getItem("units-time");
            } else {
                localStorage.setItem("units-time", units.time);
            }

            $("#inpUnitDist").val(units.distance);
            $("#inpUnitSpeed").val(units.speed);
            $("#inpUnitTime").val(units.time);


            $("#inpUnitDist").ionRangeSlider({
                grid: true,
                values: [
                    "m",
                    "km",
                    "Golden Gate",
                    "yd",
                    "mi"
                ],
                hide_min_max: true,
                hide_from_to: true,
                onFinish: updateUnits
            });

            $("#inpUnitSpeed").ionRangeSlider({
                grid: true,
                step: 1,
                values: [
                    "m/s",
                    "km/h",
                    "Golden Gate/Hard Egg",
                    "yd/h",
                    "mi/h"
                ],
                hide_min_max: true,
                hide_from_to: true,
                onFinish: updateUnits
            });

            $("#inpUnitTime").ionRangeSlider({
                grid: true,
                step: 1,
                values: [
                    "s",
                    "Hard Egg"
                ],
                hide_min_max: true,
                hide_from_to: true,
                onFinish: updateUnits
            });

            function updateUnits() {

                units.distance = $("#inpUnitDist").val();
                units.speed = $("#inpUnitSpeed").val();
                units.time = $("#inpUnitTime").val();

                localStorage.setItem("units-distance", units.distance);
                localStorage.setItem("units-speed", units.speed);
                localStorage.setItem("units-time", units.time);

                updateTable();
                updateGlobalData();
            }


            // ---- Presets ----
            $("#btnUnitPresetSI").click(function () {
                $("#inpUnitDist").data("ionRangeSlider").update({ from: 1 });
                $("#inpUnitSpeed").data("ionRangeSlider").update({ from: 1 });
                $("#inpUnitTime").data("ionRangeSlider").update({ from: 0 });

                updateUnits();
            });

            $("#btnUnitPresetImperial").click(function () {
                $("#inpUnitDist").data("ionRangeSlider").update({ from: 4 });
                $("#inpUnitSpeed").data("ionRangeSlider").update({ from: 4 });
                $("#inpUnitTime").data("ionRangeSlider").update({ from: 0 });

                updateUnits();
            });


            // ==== worker nb input ====
            var workerNb = 3;

            if (localStorage.getItem("workerNb") !== null) {
                workerNb = localStorage.getItem("workerNb");
            } else {
                localStorage.setItem("workerNb", workerNb);
            }

            $("#inpParseWorker").val(workerNb);

            $("#inpParseWorker").on("input", function () {
                localStorage.setItem("workerNb", $("#inpParseWorker").val());
                workerNb = $("#inpParseWorker").val();
            });




            var urlparams = getURLParam();

            if (typeof urlparams["workers"] != "undefined") {
                localStorage.setItem("workerNb", urlparams["workers"]);

                $("#inpParseWorker").val(urlparams["workers"]);

                workerNb = urlparams["workers"];

                history.replaceState(null, null, "/");
            }

            if (typeof urlparams["ct"] != "undefined") {
                localStorage.setItem("COD.CommaToken", atob(urlparams["ct"]));

                history.replaceState(null, null, "/");
            }

            if (typeof urlparams["access_token"] != "undefined") {
                localStorage.setItem("COD.GoogleToken", urlparams["access_token"]);

                history.replaceState(null, null, "/");
            }

            testCommaToken(function (result) {
                if (!result) {
                    commaAuth(function (result) {
                        if (!result) {
                            showAuthModal();
                        } else {
                            testCommaToken(function (result) {
                                if (!result) {
                                    showAuthModal();
                                } else
                                    loadDB();
                            });
                        }
                    });
                }
                else
                    loadDB();
            });

            var routeWorkers = [];
            var routesProcessQueue;
            var routesOrdered;

            function startRouteWorker(id, startCmd) {
                let workerRoute = routesProcessQueue.shift();

                if (typeof workerRoute !== "undefined") {
                    var worker = new Worker('/Workers/RouteWorker.js');

                    routeWorkers[id] = worker;

                    worker.postMessage({ cmd: "SetId", id: id });

                    worker.onmessage = function (event) {
                        switch (event.data.cmd) {
                            case "echo":
                                console.log(event.data.echo);
                                break;
                            case "setState":
                                workerRoute.status = event.data.state;
                                workerRoute.statusId = event.data.id;
                                updateTable();
                                break;
                            case "setTime":
                                workerRoute.execTime = event.data.time;
                                break;
                            case "parsingDone":
                                $.extend(workerRoute, event.data.obj);
                                updateGlobalData();
                                break;
                            case "maxPictureFound":
                                workerRoute.maxPicture = event.data.obj;
                                updateGlobalData();
                                break;
                            case "done": {
                                // Saving
                                let objectStore = db.transaction(['Drives'], "readwrite").objectStore('Drives');

                                let clone = $.extend(true, {}, workerRoute);

                                delete clone.table;
                                delete clone.date;

                                objectStore.put(clone).onsuccess = function () {

                                };

                                workerRoute = routesProcessQueue.shift();

                                if (typeof workerRoute !== "undefined") {
                                    worker.postMessage({
                                        cmd: startCmd,
                                        url: workerRoute.url,
                                        key: workerRoute.key,
                                        pointCount: workerRoute.duration
                                    });
                                } else {
                                    routeWorkers[id].terminate();
                                    testStartFindImageWorkers();
                                }
                                break;
                            }
                        }
                    };

                    worker.postMessage({
                        cmd: startCmd,
                        url: workerRoute.url,
                        key: workerRoute.key,
                        pointCount: workerRoute.duration
                    });

                    return true;
                } else {
                    updateTable();
                    updateFilter();
                    updateGlobalData();
                    testStartFindImageWorkers();
                    return false;
                }
            }

            var db = null;

            function loadDB() {
                if (!window.indexedDB) {
                    $("#alrtNoIndexedDB").show();
                    run();
                    return;
                }

                var request = window.indexedDB.open("OCD", 1);

                request.onupgradeneeded = function (event) {
                    db = event.target.result;

                    var objectStore = db.createObjectStore("Drives", { keyPath: "key" });
                };

                request.onsuccess = function (event) {
                    db = event.target.result;

                    run();
                }
            }

            function run() {
                $("#txtCommaToken").text(localStorage.getItem("COD.CommaToken"));

                loadEndPointJSON("me/", function (data) {
                    user = data;

                    $("#txtUserName").text(data.username);
                    $("#txtCommaPoints").text(data.points);
                });

                loadEndPointJSON("me/routes/", function (data) {
                    routes = data.routes;

                    routesOrdered = [];
                    routesProcessQueue = [];

                    $.each(routes, function (index, value) {
                        value.status = "Queued";
                        value.statusId = -1;
                        value.key = index;

                        value.date = moment(index, "YYYY-MM-DD--HH-mm-ss");
                    });



                    var transaction = db.transaction('Drives', "readonly");
                    var objectStore = transaction.objectStore('Drives');

                    objectStore.openCursor().onsuccess = function (event) {
                        var cursor = event.target.result;
                        if (cursor) {
                            let data = cursor.value;

                            data.date = moment(data.key, "YYYY-MM-DD--HH-mm-ss");

                            routes[data.key] = $.extend({}, data, routes[data.key]);

                            routes[data.key].statusId = data.statusId;
                            routes[data.key].status = data.status;

                            cursor.continue();
                        } else { // if no cursor => cursor ended

                            $.each(routes, function (index, value) {
                                routesOrdered.push(value);
                                if (value.statusId == -1)
                                    routesProcessQueue.push(value);
                            });

                            routesOrdered = routesOrdered.sort(function (a, b) { return a.key.localeCompare(b.key); });
                            for (let i = 0; i < routesOrdered.length; i++) {
                                routesOrdered[i].id = i;
                            }

                            routesOrdered = routesOrdered.sort(function (a, b) { return a.key.localeCompare(b.key) * -1; });

                            routesProcessQueue = routesProcessQueue.sort(function (a, b) { return a.key.localeCompare(b.key) * -1; });

                            updateFilter();

                            updateTable();

                            for (let i = 0; i < localStorage.getItem("workerNb") ; i++) {
                                let startResult = startRouteWorker(i, "ParseRoute");

                                if (!startResult)
                                    break;
                            }
                        }
                    };

                });
            }

            var sortCol = 0;
            var sortOrd = -1;

            function updateTable() {

                var doneRoutes = 0;
                var totRoutes = routesOrdered.length;

                $.each(routes, function (index, value) {
                    if (value.statusId >= ROUTE_STATE_PARSING_DONE)
                        doneRoutes++;
                });

                if (doneRoutes != totRoutes)
                    $("#txtDriveLoadStatus").html('<span class="fa-li fa fa-spinner fa-spin"></span> Loading Routes ...');
                else
                    $("#txtDriveLoadStatus").html('<span class="fa-li fa fa-spinner fa-spin"></span> Loading Complete !');

                $("#txtDriveLoadCurrent").text(doneRoutes);
                $("#txtDriveLoadTot").text(totRoutes);



                if ($("#tblDrives tbody").children().length == 0) {
                    for (let i = 0; i < routesOrdered.length; i++) {
                        let route = routesOrdered[i];

                        let tr = $('<tr routeKey="' + route.key + '">' +
                                                        '<td></td>' +
                                                        '<td></td>' +
                                                        '<td></td>' +
                                                        '<td></td>' +
                                                        '<td></td>' +
                                                        '<td></td>' +
                                                        '<td></td>' +
                                                        '<td></td>' +
                                                      "</tr>");

                        route.table = {};
                        route.table.tr = tr;
                        route.table.id = tr.children(":nth-child(1)");
                        route.table.date = tr.children(":nth-child(2)");
                        route.table.dist = tr.children(":nth-child(3)");
                        route.table.duration = tr.children(":nth-child(4)");
                        route.table.maxSpeed = tr.children(":nth-child(5)");
                        route.table.avgSpeed = tr.children(":nth-child(6)");
                        route.table.minSpeed = tr.children(":nth-child(7)");
                        route.table.status = tr.children(":nth-child(8)");

                        $("#tblDrives tbody").append(tr);
                    }
                }

                for (let i = 0; i < routesOrdered.length; i++) {
                    let route = routesOrdered[i];

                    route.table.tr.toggleClass("text-muted", route.statusId < ROUTE_STATE_PARSING_DONE);


                    route.table.id.text(route.id);
                    route.table.date.text(route.date.format("YYYY/MM/DD HH:mm:ss"));
                    route.table.dist.text(route.statusId >= ROUTE_STATE_PARSING_DONE ? formatDistance(route.totalDist, "mi") : formatDistance(route.len, "m"));
                    route.table.duration.text(route.statusId >= ROUTE_STATE_PARSING_DONE ? formatTime(route.duration, "s") : "-");
                    route.table.maxSpeed.text(route.statusId >= ROUTE_STATE_PARSING_DONE ? formatSpeed(route.maxSpeed, "m/s") : "-");
                    route.table.avgSpeed.text(route.statusId >= ROUTE_STATE_PARSING_DONE ? formatSpeed(route.avgSpeed, "m/s") : "-");
                    route.table.minSpeed.text(route.statusId >= ROUTE_STATE_PARSING_DONE ? formatSpeed(route.minSpeed, "m/s") : "-");
                    route.table.status.text(route.status);
                };

            }

            // Table Filter
            function updateFilter() {

                let distanceMin = Number.MAX_VALUE;
                let distanceMax = 0;

                let durationMin = Number.MAX_VALUE;
                let durationMax = 0;

                let dateMin = Number.MAX_VALUE;
                let dateMax = 0;

                $.each(routes, function (index, value) {
                    let duration = moment(value.end_time, "YYYY-MM-DD--HH-mm-ss").diff(moment(value.start_time, "YYYY-MM-DD--HH-mm-ss")) / 1000;
                    let date = moment(value.start_time, "YYYY-MM-DD--HH-mm-ss").format("X");

                    if (value.len < distanceMin)
                        distanceMin = value.len;

                    if (value.len > distanceMax)
                        distanceMax = value.len;


                    if (duration < durationMin)
                        durationMin = duration;

                    if (duration > durationMax)
                        durationMax = duration;


                    if (date < dateMin)
                        dateMin = date;

                    if (date > dateMax)
                        dateMax = date;
                });

                $("#posFilterDistance").data("ionRangeSlider").update({
                    min: distanceMin,
                    from: distanceMin,
                    to: distanceMax,
                    max: distanceMax
                });

                $("#posFilterDuration").data("ionRangeSlider").update({
                    min: durationMin,
                    from: durationMin,
                    to: durationMax,
                    max: durationMax
                });

                $("#posFilterDate").data("ionRangeSlider").update({
                    min: dateMin,
                    from: dateMin,
                    to: dateMax,
                    max: dateMax
                });
            }



            // Table Sort
            $("#tblDrives thead th").each(function() {
                $(this).append('<span class="fa fa-fw fa-sort pull-right sort-btn"></span>');
            });

            $("#tblDrives thead th:first-child span").removeClass("fa-sort").addClass("fa-sort-desc");

            $("#tblDrives thead th").on("click", function() {
                let item = $(this).find(".sort-btn");
                let idx = item.parents("th").first().index();
                if (item.hasClass("fa-sort")) {
                    $(".selected-sort").removeClass("fa-sort-asc fa-sort-desc selected-sort").addClass("fa-sort");

                    item.removeClass("fa-sort").addClass("fa-sort-asc selected-sort");

                    sortCol = idx;
                    sortOrd = 1;
                } else if (item.hasClass("fa-sort-asc")) {
                    item.removeClass("fa-sort-asc").addClass("fa-sort-desc selected-sort");

                    sortCol = idx;
                    sortOrd = -1;
                } else if (item.hasClass("fa-sort-desc")) {
                    item.removeClass("fa-sort-desc").addClass("fa-sort-asc selected-sort");

                    sortCol = idx;
                    sortOrd = 1;
                }

                filterAndOrderTable();
            });

            function filterAndOrderTable() {
                $("#tblDrives tbody").empty();

                routesOrdered = [];

                // Filter

                let distanceMin = +($("#posFilterDistance").val().split(";")[0]);
                let distanceMax = +($("#posFilterDistance").val().split(";")[1]);

                let durationMin = +($("#posFilterDuration").val().split(";")[0]);
                let durationMax = +($("#posFilterDuration").val().split(";")[2]);

                let dateMin = +($("#posFilterDate").val().split(";")[0]);
                let dateMax = +($("#posFilterDate").val().split(";")[1]);

                $.each(routes, function (index, value) {
                    let duration = moment(value.end_time, "YYYY-MM-DD--HH-mm-ss").diff(moment(value.start_time, "YYYY-MM-DD--HH-mm-ss")) / 1000;
                    let date = moment(value.start_time, "YYYY-MM-DD--HH-mm-ss").format("X");

                    if (distanceMin > value.len || distanceMax < value.len)
                        return;

                    if (durationMin > duration || durationMax < duration)
                        return;

                    if (dateMin > date || dateMax < date)
                        return;

                    routesOrdered.push(value);
                });

                // Order

                if (sortCol !== -1) {
                    switch(sortCol) {
                        case 0:
                            routesOrdered = routesOrdered.sort(function (a, b) { return (a.id - b.id) * sortOrd; });
                            break;
                        case 1:
                            routesOrdered = routesOrdered.sort(function (a, b) { return (a.key.localeCompare(b.key)) * sortOrd; });
                            break;
                        case 2:
                            routesOrdered = routesOrdered.sort(function (a, b) { return (a.totalDist - b.totalDist) * sortOrd; });
                            break;
                        case 3:
                            routesOrdered = routesOrdered.sort(function (a, b) { return (a.duration - b.duration) * sortOrd; });
                            break;
                        case 4:
                            routesOrdered = routesOrdered.sort(function (a, b) { return (a.maxSpeed - b.maxSpeed) * sortOrd; });
                            break;
                        case 5:
                            routesOrdered = routesOrdered.sort(function (a, b) { return (a.avgSpeed - b.avgSpeed) * sortOrd; });
                            break;
                        case 6:
                            routesOrdered = routesOrdered.sort(function (a, b) { return (a.minSpeed - b.minSpeed) * sortOrd; });
                            break;
                        case 7:
                            routesOrdered = routesOrdered.sort(function (a, b) { return (a.statusId - b.statusId) * sortOrd; });
                            break;
                    }
                }

                updateTable();
                updateGlobalData();
            }

            var imageWorkerStarted = false;

            function testStartFindImageWorkers() {
                if (imageWorkerStarted)
                    return;

                var doneRoutes = 0;
                var totRoutes = routesOrdered.length;

                $.each(routes, function (index, value) {
                    if (value.statusId >= ROUTE_STATE_PARSING_DONE)
                        doneRoutes++;
                });

                if (doneRoutes == totRoutes) {
                    imageWorkerStarted = true;

                    $.each(routes, function (index, value) {
                        if (value.statusId != 7)
                            routesProcessQueue.push(value);
                    });

                    routesProcessQueue = routesProcessQueue.sort(function (a, b) { return a.key.localeCompare(b.key) * -1; });

                    for (let i = 0; i < localStorage.getItem("workerNb") ; i++) {
                        let startResult = startRouteWorker(i, "FindMaxPicture");

                        if (!startResult)
                            break;
                    }

                }
            }

            $(window).on("beforeunload", function () {
                db.close();
            });

            $("#btnDeleteIDB").click(function () {
                var DBDeleteRequest = window.indexedDB.deleteDatabase("OCD");

                DBDeleteRequest.onerror = function (event) {
                    console.log("Error deleting database.");
                };

                DBDeleteRequest.onsuccess = function (event) {
                    console.log("Database deleted successfully");
                };
            });

            // ==== Graphs ====

            let chrtGlobalSpeed = new Chart($("#chrtGlobalSpeed"), {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [

                        {
                            type: 'line',
                            label: "Max Speed",
                            data: [],
                            fill: false,
                            yAxisID: 'y-axis-1',
                            borderColor: '#c9c900',
                            backgroundColor: '#c9c900',
                            pointBorderColor: '#c9c900',
                            pointBackgroundColor: '#c9c900',

                            hoverBorderColor: '#eaeaa4',
                            pointHoverBackgroundColor: '#eaeaa4',
                            pointHoverBorderColor: '#eaeaa4'
                        },
                        {
                            type: 'line',
                            label: "Duration",
                            data: [],
                            fill: false,
                            yAxisID: 'y-axis-2',
                            borderColor: '#000080',
                            backgroundColor: '#000080',
                            pointBorderColor: '#000080',
                            pointBackgroundColor: '#000080',

                            hoverBorderColor: '#0000f6',
                            pointHoverBackgroundColor: '#0000f6',
                            pointHoverBorderColor: '#0000f6'
                        },
                        {
                            type: 'line',
                            label: "Distance",
                            data: [],
                            fill: false,
                            yAxisID: 'y-axis-3',
                            borderColor: '#ff4500',
                            backgroundColor: '#ff4500',
                            pointBorderColor: '#ff4500',
                            pointBackgroundColor: '#ff4500',

                            hoverBorderColor: '#ff6a33',
                            pointHoverBackgroundColor: '#ff6a33',
                            pointHoverBorderColor: '#ff6a33'
                        },
                        {
                            type: 'bar',
                            label: "Avg Speed",
                            data: [],
                            fill: false,
                            yAxisID: 'y-axis-1',
                            backgroundColor: '#4dc14c',
                            borderColor: '#4dc14c',
                            hoverBackgroundColor: '#b2e4b2',
                            hoverBorderColor: '#b2e4b2'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    tooltips: {
                        mode: 'label'
                    },
                    elements: {
                        line: {
                            fill: false
                        }
                    },
                    scales: {
                        xAxes: [
                            {
                                display: true,
                                gridLines: {
                                    display: false
                                },
                                labels: {
                                    show: true
                                }
                            }
                        ],
                        yAxes: [
                        {
                            // Speed
                            type: "linear",
                            display: true,
                            position: "left",
                            id: "y-axis-1",
                            ticks: {
                                min: 0,
                                callback: function (value, index, values) {
                                    return formatSpeed(value, units.speed);
                                }
                            },
                            labels: {
                                show: true
                            },
                            gridLines: {
                                display: false
                            }
                        },
                        {
                            // Duration
                            type: "linear",
                            display: true,
                            position: "right",
                            id: "y-axis-2",
                            ticks: {
                                min: 0,
                                callback: function (value, index, values) {
                                    return formatTime(value, units.time);
                                }
                            },
                            labels: {
                                show: true
                            },
                            gridLines: {
                                display: false
                            }
                        },
                            { // Distance
                                type: "linear",
                                display: true,
                                position: "right",
                                id: "y-axis-3",
                                ticks: {
                                    min: 0,
                                    callback: function (value, index, values) {
                                        return formatDistance(value, units.distance);
                                    }
                                },
                                labels: {
                                    show: true
                                }
                            }
                        ]
                    }
                }
            });

            let chrtDriveSpeed = new Chart($("#chrtDriveSpeed"), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            type: 'line',
                            label: "Speed",
                            data: [],
                            fill: false,
                            yAxisID: 'y-axis-1',
                            borderColor: '#c9c900',
                            backgroundColor: '#c9c900',
                            pointRadius: 0,

                            hoverBorderColor: '#eaeaa4'
                        },
                        {
                            type: 'line',
                            label: "Distance",
                            data: [],
                            fill: false,
                            yAxisID: 'y-axis-2',
                            borderColor: '#ff4500',
                            backgroundColor: '#ff4500',

                            pointRadius: 0,

                            hoverBorderColor: '#ff6a33'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    tooltips: {
                        mode: 'label'
                    },
                    elements: {
                        line: {
                            fill: false
                        }
                    },
                    scales: {
                        xAxes: [
                            {
                                display: true,
                                gridLines: {
                                    display: false
                                },
                                labels: {
                                    show: true
                                }
                            }
                        ],
                        yAxes: [
                        {
                            // Speed
                            type: "linear",
                            display: true,
                            position: "left",
                            id: "y-axis-1",
                            ticks: {
                                min: 0,
                                callback: function (value, index, values) {
                                    return formatSpeed(value, units.speed);
                                }
                            },
                            labels: {
                                show: true
                            },
                            gridLines: {
                                display: false
                            }
                        },
                            { // Distance
                                type: "linear",
                                display: true,
                                position: "right",
                                id: "y-axis-2",
                                ticks: {
                                    min: 0,
                                    callback: function (value, index, values) {
                                        return formatDistance(value, units.distance);
                                    }
                                },
                                labels: {
                                    show: true
                                }
                            }
                        ]
                    }
                }
            });

            function updateGlobalData() {
                var doneRoutes = 0;
                var totRoutes = routesOrdered.length;


                var totalDist = 0;
                var totalTime = 0;

                var timeArr = {};
                var distanceArr = {};

                var weigthSpeedAvgTot = 0;
                var weigthSpeedAvgCount = 0;

                var maxSpeed = 0;

                $.each(routes, function (index, value) {
                    if (value.statusId < ROUTE_STATE_PARSING_DONE)
                        return;

                    doneRoutes++;

                    totalDist += value.totalDist;
                    totalTime += value.duration;

                    weigthSpeedAvgTot += value.avgSpeed * value.data.length;
                    weigthSpeedAvgCount += value.data.length;

                    if (value.maxSpeed > maxSpeed)
                        maxSpeed = value.maxSpeed;

                    let startDate = value.startDate.substr(0, 10);
                    let endDate = value.endDate.substr(0, 10);

                    if (startDate.substr(5, 2) == endDate.substr(5, 2)) {
                        if (typeof timeArr[startDate] == "undefined")
                            timeArr[startDate] = 0;

                        if (typeof distanceArr[startDate] == "undefined")
                            distanceArr[startDate] = 0;

                        timeArr[startDate] += value.duration;
                        distanceArr[startDate] += value.totalDist;

                    } else {
                        for (let i = 0; i < value.data.length; i++) {
                            var date = moment(value.data[i].date).format("YYYY/MM/DD");

                            if (typeof timeArr[date] == "undefined")
                                timeArr[date] = 0;

                            if (typeof distanceArr[date] == "undefined")
                                distanceArr[date] = 0;

                            timeArr[date] += 1;

                            if (typeof value.data[i - 1] != "undefined")
                                distanceArr[startDate] += value.data[i].dist - value.data[i - 1].dist;
                        }
                    }
                });

                $("#txtDistanceDriven").text(formatDistance(totalDist, "mi"));
                $("#txtTimeDriven").text(formatTime(totalTime, "s"));

                $("#txtMaxSpeed").text(formatSpeed(maxSpeed, "m/s"));
                $("#txtAvgSpeed").text(formatSpeed(weigthSpeedAvgTot / weigthSpeedAvgCount, "m/s"));

                var timeSum = 0;

                $.each(timeArr, function (index, value) {
                    timeSum += value;
                });

                var distanceSum = 0;

                $.each(distanceArr, function (index, value) {
                    distanceSum += value;
                });

                $("#txtAvgDistanceDriven").text(formatDistance(distanceSum / Object.keys(distanceArr).length, "mi"));
                $("#txtAvgTimeDriven").text(formatTime(timeSum / Object.keys(timeArr).length, "s"));

                // ==== Graphs ====

                // ---- Speed Graph ----

                let graphSpeedLabels = [];
                let graphSpeedMax = [];
                let graphSpeedAvg = [];
                let graphDuration = [];
                let graphDistance = [];

                for (let i = 0; i < routesOrdered.length; i++) {
                    if (routesOrdered[i].statusId < ROUTE_STATE_PARSING_DONE)
                        continue;

                    graphSpeedLabels.push(routesOrdered[i].startDate);

                    graphSpeedMax.push(formatSpeedNoUnit(routesOrdered[i].maxSpeed, "m/s"));
                    graphSpeedAvg.push(formatSpeedNoUnit(routesOrdered[i].avgSpeed, "m/s"));

                    graphDuration.push(formatTimeNoUnit(routesOrdered[i].duration, "s"));

                    graphDistance.push(formatDistanceNoUnit(routesOrdered[i].totalDist, "mi"));

                }

                chrtGlobalSpeed.data.labels = graphSpeedLabels;
                chrtGlobalSpeed.data.datasets[3].data = graphSpeedAvg;
                chrtGlobalSpeed.data.datasets[0].data = graphSpeedMax;

                chrtGlobalSpeed.data.datasets[1].data = graphDuration;
                chrtGlobalSpeed.data.datasets[2].data = graphDistance;

                chrtGlobalSpeed.update(doneRoutes == totRoutes ? 1000 : 0);
            }

            // ==== drive selection ====
            var selectedDrive = "";

            $("#playerImg").on("error", function () {
                $(this).attr("src", "/Assets/Custom/img/na.png");
            });

            $("#tblDrives tbody").on("click", "tr", function () {
                $("#btnPause").click();

                $("#tblDrives tbody tr").removeClass("table-danger");
                $(this).addClass("table-danger");

                selectedDrive = $(this).attr("routeKey");

                var route = routes[selectedDrive];

                // Player

                $("#posPlayer").data("ionRangeSlider").update({
                    from: +moment(route.data[0].date).format("X"),

                    min: +moment(route.data[0].date).format("X"),
                    max: +moment(route.data[route.data.length - 1].date).format("X"),

                    from_min: +moment(route.data[0].date).format("X"),
                    from_max: +moment(route.data[route.statusId >= ROUTE_STATE_MAX_IMAGE_FOUND ? route.maxPicture : route.data.length - 1].date).format("X")
                });

                $("#posGif").data("ionRangeSlider").update({
                    from: +moment(route.data[0].date).format("X"),
                    to: +moment(route.data[route.data.length - 1].date).format("X"),

                    min: +moment(route.data[0].date).format("X"),
                    max: +moment(route.data[route.data.length - 1].date).format("X")
                });

                // Drive Stat

                let labelArr = [];
                let speedArr = [];
                let distanceArr = [];

                for (let i = 0; i < route.data.length; i++) {
                    labelArr.push(route.data[i].dateStr);

                    speedArr.push(formatSpeedNoUnit(route.data[i].speed, "m/s"));
                    distanceArr.push(formatDistanceNoUnit(route.data[i].dist, "mi"));
                }

                chrtDriveSpeed.data.labels = labelArr;
                chrtDriveSpeed.data.datasets[0].data = speedArr;
                chrtDriveSpeed.data.datasets[1].data = distanceArr;
                chrtDriveSpeed.update();

                $("#txtDriveInfoStartDate").text(route.startDate);
                $("#txtDriveInfoEndDate").text(route.endDate);

                $("#txtDriveInfoMinSpeed").text(formatSpeed(route.minSpeed, "m/s"));
                $("#txtDriveInfoMaxSpeed").text(formatSpeed(route.maxSpeed, "m/s"));
                $("#txtDriveInfoAvgSpeed").text(formatSpeed(route.avgSpeed, "m/s"));

                $("#txtDriveInfoGPSPoint").text(route.data.length);
            });

            let posTimeout = null;
            $("#posPlayer").on("change", function () {
                clearTimeout(posTimeout);

                posTimeout = setTimeout(function () {
                    updatePlayerPicture();
                }, 100);
            });

            $("#btnPrevImg").click(function () {
                $("#btnPause").click();
                $("#posPlayer").data("ionRangeSlider").update({ from: +$("#posPlayer").val() - 1 });
                updatePlayerPicture();
            });

            $("#btnNextImg").click(function () {
                $("#btnPause").click();
                $("#posPlayer").data("ionRangeSlider").update({ from: +$("#posPlayer").val() + 1 });
                updatePlayerPicture();
            });

            $("#btnSpeedMinus").click(function () {
                let idx = $('#inpSpeed [value="' + $("#inpSpeed").val() + '"]').index();

                idx--;

                if (idx < 0)
                    idx = 0;

                idx++;

                $('#inpSpeed').val($('#inpSpeed :nth-child(' + idx + ')').attr("value"));
            });

            $("#btnSpeedPlus").click(function () {
                let idx = $('#inpSpeed [value="' + $("#inpSpeed").val() + '"]').index();

                idx++;

                if (idx > $('#inpSpeed').children().length - 1)
                    idx = $('#inpSpeed').children().length - 1;

                idx++;

                $('#inpSpeed').val($('#inpSpeed :nth-child(' + idx + ')').attr("value"));
            });


            let playTimeout = null;
            let lastPlay = 0;

            $("#btnPlay").click(function () {
                $("#btnPlay").prop("hidden", true);
                $("#btnPause").prop("hidden", false);

                playStep();
            });

            function playStep() {
                $("#posPlayer").data("ionRangeSlider").update({ from: +$("#posPlayer").val() + 1 });
                if (lastPlay == $("#posPlayer").val()) {
                    $("#btnPause").click();
                    return;
                }


                updatePlayerPicture();

                lastPlay = +$("#posPlayer").val();

                let speed = 1000 / +$("#inpSpeed").val();

                playTimeout = setTimeout(playStep, speed);
            }

            $("#btnPause").click(function () {
                $("#btnPlay").prop("hidden", false);
                $("#btnPause").prop("hidden", true);

                clearTimeout(playTimeout);
            });


            let loaderTimeout = null;

            function updatePlayerPicture() {
                let key = moment($("#posPlayer").val(), "X").toISOString();

                clearTimeout(loaderTimeout);

                loaderTimeout = setTimeout(function () {
                    $("#playerImgOverlay").show();
                }, 100);



                $("#playerImg").attr("src", getPictureUrl(routes[selectedDrive], routes[selectedDrive].dataByDate[key]));

                for (let i = 1; i <= 3 + 2 * (+$("#inpSpeed").val()) ; i++) {
                    let subKey = moment(+$("#posPlayer").val() + i, "X").toISOString();
                    if (typeof routes[selectedDrive].dataByDate[subKey] != "undefined") {
                        let img = new Image();
                        img.src = getPictureUrl(routes[selectedDrive], routes[selectedDrive].dataByDate[subKey]);

                    }
                }
            }

            $("#playerImg").on("load", function () {
                clearTimeout(loaderTimeout);
                $("#playerImgOverlay").hide();
            });


            // ==== Gif ====

            $("#btnSetGifStart").click(function () {
                $("#posGif").data("ionRangeSlider").update({ from: +$("#posPlayer").val() });
            });

            $("#btnSetGifEnd").click(function () {
                $("#posGif").data("ionRangeSlider").update({ to: +$("#posPlayer").val() });
            });

            $("#btnGifExportShow").click(function () {
                $("#gifModal").modal("show");
            });

            $("#rdiGifSizePresetFull, #rdiGifSizePresetHalf, #rdiGifSizePresetQuarter, #rdiGifSizePresetCustom").on("click", function () {
                console.log("bip");
                let size = $(this).attr("gifSize");
                if (size === "#")
                    return;

                size = size.split("x");

                $("#inpGifWidth").val(size[0]);
                $("#inpGifHeight").val(size[1]);
            });

            $("#inpGifWidth, #inpGifHeight").on("change keyup input", function () {
                $("#rdiGifSizePresetCustom").click();
            });

            var gifExportData = {};

            $("#btnGifStartExport").click(function () {
                $("#gifResultZone").hide();
                gifExportData.imagesForExport = [];
                gifExportData.route = routes[selectedDrive];

                gifExportData.width = $("#inpGifWidth").val();
                gifExportData.height = $("#inpGifHeight").val();

                gifExportData.interval = $("#inpGifInterval").val();
                gifExportData.quality = $("#inpGifQuality").val();
                gifExportData.repeat = $("#inpGifRepeat").val();

                gifExportData.start = moment.unix($("#posGif").val().split(";")[0]).toISOString();
                gifExportData.end = moment.unix($("#posGif").val().split(";")[1]).toISOString();

                gifExportData.start = gifExportData.route.dataByDate[gifExportData.start].secPos;
                gifExportData.end = gifExportData.route.dataByDate[gifExportData.end].secPos;

                gifExportData.currentPos = gifExportData.start;

                downloadGifImages();
            });

            function downloadGifImages() {
                $("#prbGifExportStatus").attr("value", ((gifExportData.currentPos - gifExportData.start) * 100) / (gifExportData.end - gifExportData.start));
                $("#txtGifExportStatus").text("Step 1/3 : Downloading picture " + (gifExportData.currentPos - gifExportData.start + 1) + "/" + (gifExportData.end - gifExportData.start + 1));

                if (gifExportData.currentPos > gifExportData.end) {
                    generateGif();
                    return;
                }

                let image = new Image();
                image.crossOrigin = "anonymous";
                image.addEventListener("load", function () {

                    gifExportData.imagesForExport.push(image);
                    gifExportData.currentPos++;
                    downloadGifImages();
                }, false);

                image.addEventListener("error", function () {
                    gifExportData.currentPos++;
                    downloadGifImages();
                }, false);

                image.src = getPictureUrl(gifExportData.route, gifExportData.route.data[gifExportData.currentPos]);
            }

            function generateGif() {
                $("#prbGifExportStatus").attr("value", 0);
                $("#txtGifExportStatus").text("Step 2/3 : Starting Gif Generation");

                gifExportData.gif = new GIF({
                    workers: 2,
                    quality: gifExportData.quality,
                    width: gifExportData.width,
                    height: gifExportData.height,
                    repeat: gifExportData.repeat,
                    workerScript: "/Assets/GifJs/js/gif.worker.js"
                });

                $.each(gifExportData.imagesForExport, function (index, value) {
                    $("#prbGifExportStatus").attr("value", index / gifExportData.imagesForExport.length * 100);
                    $("#txtGifExportStatus").text("Step 2/3 : Resizing images " + index + "/" + gifExportData.imagesForExport.length);

                    if (value.height == gifExportData.height && value.width == gifExportData.width) { // shortcut if the picture is already the wanted size
                        gifExportData.gif.addFrame(value, { delay: gifExportData.interval });
                        return;
                    }

                    let canvas = document.createElement('canvas');

                    canvas.width = gifExportData.width;
                    canvas.height = gifExportData.height;

                    var context = canvas.getContext('2d');

                    context.drawImage(value, 0, 0, gifExportData.width, gifExportData.height);

                    gifExportData.gif.addFrame(canvas, { delay: gifExportData.interval });
                });

                gifExportData.gif.on('progress', function (progress) {
                    let val = Math.round(progress * 100);
                    $("#prbGifExportStatus").attr("value", val);
                    $("#txtGifExportStatus").text("Step 3/3 : Generating Gif (" + val + " %)");
                });

                gifExportData.gif.on('finished', function (blob) {
                    $("#txtGifExportStatus").text("Ready");
                    gifExportData.gifBlob = blob;
                    $("#txtGifExportSize").text(Math.round(blob.size / 1024));
                    $("#imgGifExportResult").attr("src", URL.createObjectURL(gifExportData.gifBlob));
                    $("#gifResultZone").show();
                });

                gifExportData.gif.render();
            }

            $("#btnGifDownload").click(function () {
                saveAs(gifExportData.gifBlob, "OCD-" + gifExportData.route.date.format("yyyy-MM-dd--HH-mm-ss") + ".gif");
            });

            // ==== Exports & miscs ====
            $("#btnCommaTokenModal").click(function () {
                $("#commaTokenModal").modal("show");
            });

            var clip = new Clipboard('#btnCopyLnkShare');

            $("#btnShareLnk").click(function () {
                $("#shareLnkModal").modal("show");

                $("#inpLnkShare").val(window.location.href + "#ct=" + btoa(localStorage.getItem("COD.CommaToken")));
            });

            $("#btnDisconnect").click(function () {
                localStorage.setItem("COD.CommaToken", "");
                localStorage.setItem("COD.GoogleToken", "");

                location.reload();
            });

        });


    </script>
</body>

</html>